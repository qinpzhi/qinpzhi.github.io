(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{318:function(v,_,t){"use strict";t.r(_);var a=t(14),s=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"运行时数据区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运行时数据区"}},[v._v("#")]),v._v(" 运行时数据区")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("使用PC寄存器存储字节码指令地址有什么用/为什么PC寄存器记录当前线程的执行地址？")]),v._v(" "),_("p",[_("code",[v._v("因为CPU需要不停切换各个线程（CPU时间片），这个时候切回来后，就需要知道接着从哪里开始执行，JVM的字节码解释器就需要改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。")])])]),v._v(" "),_("li",[_("p",[v._v("PC寄存器为什么会被设定为线程私有")]),v._v(" "),_("p",[_("code",[v._v("所谓的多线程其实是CPU不停做任务切换，这样必然导致经常中断或者恢复，为了保证分毫无差，准确记录各个线程正在执行的当前字节码指令地址，需要为每一个线程分配一个PC寄存器，各个线程之间可以进行独立计算，不会出现互相干扰。")])])]),v._v(" "),_("li",[_("p",[v._v("举例栈溢出的情况")]),v._v(" "),_("p",[v._v("如果线程请求分配的栈容量超过 Java 虚拟机栈允许的最大容量，Java 虚拟机将会抛出一个 "),_("strong",[v._v("StackOverflowError")]),v._v(" 异常。可以通过-Xss设置栈的大小。")]),v._v(" "),_("p",[_("code",[v._v("调整栈大小，能保证不出现溢出吗？--不能,比如死循环")])]),v._v(" "),_("p",[_("code",[v._v("分配的内存越大越好吗？--不是，内存空间有限，挤占其他内存空间")])]),v._v(" "),_("p",[_("code",[v._v("垃圾回收是否涉及到虚拟机栈？--不涉及，只有进栈和出栈")])]),v._v(" "),_("p",[_("code",[v._v("方法中定义的局部变量是否是线程安全？--具体问题具体分析。如果只有一个线程可以操作此数据，则必然是线程安全的，如果多个线程操作此数据，则此数据是共享数据，如果不考虑同步机制的话，会存在线程安全问题。")])])]),v._v(" "),_("li",[_("p",[v._v("说一下JVM内存模型，由哪些区？分别干什么？\n"),_("img",{attrs:{src:"/images/jvm/answer4.jpg"}})])]),v._v(" "),_("li",[_("p",[v._v("java8的内存分代改进；Eden和Survior的比例分配\n"),_("img",{attrs:{src:"/images/jvm/answer3.jpg"}}),v._v(" "),_("img",{attrs:{src:"/images/jvm/answer2.jpg"}})])]),v._v(" "),_("li",[_("p",[v._v("为什么要有新生代和老年代？\n"),_("img",{attrs:{src:"/images/jvm/answer1.jpg"}})])]),v._v(" "),_("li",[_("p",[v._v("什么时候对象会进入老年代？\n"),_("img",{attrs:{src:"/images/jvm/answer5.jpg"}})])])]),v._v(" "),_("h2",{attrs:{id:"对象相关"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对象相关"}},[v._v("#")]),v._v(" 对象相关")]),v._v(" "),_("ol",{attrs:{start:"8"}},[_("li",[v._v("对象在JVM中是怎么存储的？")]),v._v(" "),_("li",[v._v("对象头信息里面有哪些东西？")])]),v._v(" "),_("h2",{attrs:{id:"垃圾回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[v._v("#")]),v._v(" 垃圾回收")]),v._v(" "),_("ol",{attrs:{start:"10"}},[_("li",[v._v("你知道哪几种垃圾回收器，各自的优缺点，重点讲下CMS和G1")]),v._v(" "),_("li",[v._v("JVM GC算法有哪些，目前的JDK版本采用什么回收算法")]),v._v(" "),_("li",[v._v("G1回收器讲下回收过程")]),v._v(" "),_("li",[v._v("GC是什么，为什么要有GC，GC的两种判定方式")]),v._v(" "),_("li",[v._v("说下GC算法的分代回收")]),v._v(" "),_("li",[v._v("垃圾收集策略和算法")]),v._v(" "),_("li",[v._v("java的垃圾回收器有哪些，说下g1的应用场景，平时你是如何搭配使用垃圾回收器的")]),v._v(" "),_("li",[v._v("system.gc()和runtime.gc()会做哪些事情")])])])}),[],!1,null,null,null);_.default=s.exports}}]);